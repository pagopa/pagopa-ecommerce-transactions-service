openapi: 3.0.0
info:
  version: 0.0.1
  title: Pagopa eCommerce payment transactions service
  description: This microservice handles transaction's lifecycle and workflow.
  contact:
    name: pagoPA - Touchpoints team
tags:
  - name: transactions
    description: Api's for performing a transaction
    externalDocs:
      url: https://pagopa.atlassian.net/wiki/spaces/I/pages/611287199/-servizio+transactions+service
      description: Technical specifications
externalDocs:
  url: https://pagopa.atlassian.net/wiki/spaces/I/pages/492339720/pagoPA+eCommerce+Design+Review
  description: Design review
servers:
  - url: https://api.platform.pagopa.it/transactions-service
paths:
  /transactions:
    post:
      operationId: newTransaction
      tags:
        - transactions
      description: Create a new transaction activating the payments notice by meaning of 'Nodo' ActivatePaymentNotice primitive
      parameters:
        - in: header
          name: X-Client-Id
          required: true
          description: Transaction origin (populated by APIM policy)
          schema:
            $ref: '#/components/schemas/ClientId'
      summary: Make a new transaction
      requestBody:
        $ref: "#/components/requestBodies/NewTransactionRequest"
      responses:
        '200':
          description: New transaction successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewTransactionResponse'
        '400':
          description: Formally invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '404':
          description: Node cannot find the services needed to process this request in its configuration. This error is most likely to occur when submitting a non-existing RPT id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationFaultPaymentProblemJson'
        '409':
          description: Conflict on payment status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentStatusFaultPaymentProblemJson'
        '502':
          description: PagoPA services are not available or request is rejected by PagoPa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayFaultPaymentProblemJson'
        '503':
          description: EC services are not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartyConfigurationFaultPaymentProblemJson'
  /transactions/{transactionId}:
    get:
      tags:
        - transactions
      operationId: getTransactionInfo
      summary: Get transaction information
      description: Return information for the input specific transaction resource
      parameters:
        - in: header
          name: x-user-id
          required: false
          description: User id (valued for authenticated payments) owner of the transaction
          schema:
            $ref: '#/components/schemas/UserId'
        - in: path
          name: transactionId
          schema:
            type: string
          required: true
          description: Transaction ID
      responses:
        '200':
          description: Transaction data successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionInfo"
        '400':
          description: Invalid transaction id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
    delete:
      tags:
        - transactions
      operationId: requestTransactionUserCancellation
      parameters:
        - in: header
          name: x-user-id
          required: false
          description: User id (valued for authenticated payments) owner of the transaction
          schema:
            $ref: '#/components/schemas/UserId'
        - in: path
          name: transactionId
          schema:
            type: string
          required: true
          description: Transaction ID
      summary: Performs the cancellation of the transaction
      responses:
        '202':
          description: Transaction cancellation request successfully accepted
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '409':
          description: Conflict on payment status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemJson'
  /transactions/{transactionId}/auth-requests:
    post:
      tags:
        - transactions
      operationId: requestTransactionAuthorization
      summary: Request authorization
      description: Request authorization for the transaction identified by payment token
      parameters:
        - in: header
          name: x-user-id
          required: false
          description: User id (valued for authenticated payments) owner of the transaction
          schema:
            $ref: '#/components/schemas/UserId'
        - in: path
          name: transactionId
          schema:
            type: string
          required: true
          description: Transaction ID
        - in: header
          name: x-pgs-id
          schema:
            type: string
            pattern: 'NPG|REDIRECT'
          required: false
          description: Pgs identifier (populated by APIM policy)
        - in: header
          name: lang
          required: false
          description: language selection
          schema:
            $ref: '#/components/schemas/Lang'
      requestBody:
        $ref: "#/components/requestBodies/RequestAuthorizationRequest"
      responses:
        '200':
          description: Transaction authorization request successfully processed, redirecting client to authorization web page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestAuthorizationResponse"
        '400':
          description: Invalid transaction id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
        '409':
          description: Transaction already processed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
        '422':
          description: Transaction cannot be processed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
    patch:
      tags:
        - transactions
      operationId: updateTransactionAuthorization
      summary: Update authorization
      description: Callback endpoint used for notify authorization outcome
      parameters:
        - in: path
          name: transactionId
          schema:
            type: string
          required: true
          description: Base64 of bytes related to TransactionId
      requestBody:
        $ref: "#/components/requestBodies/UpdateAuthorizationRequest"
      responses:
        '200':
          description: Transaction authorization request successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionInfo"
        '400':
          description: Invalid transaction id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
        '502':
          description: Bad gateway
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
  /transactions/{transactionId}/user-receipts:
    post:
      tags:
        - transactions
      operationId: addUserReceipt
      parameters:
        - in: path
          name: transactionId
          schema:
            type: string
          required: true
          description: Transaction ID
      summary: Add user receipt
      description: Callback endpoint used for generate user receipt for the transaction
      requestBody:
        $ref: "#/components/requestBodies/AddUserReceiptRequest"
      responses:
        '200':
          description: Receipt successfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUserReceiptResponse"
        '400':
          description: Invalid transaction id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
        '422':
          description: Unprocessable entity (most likely the transaction is in an invalid state)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
  /transactions/{transactionId}/outcomes:
    get:
      tags:
        - transactions
      operationId: getTransactionOutcomes
      summary: Get transaction outcome
      description: Return outcome information for the input specific transaction resource
      parameters:
        - in: header
          name: x-user-id
          required: false
          description: User id (valued for authenticated payments) owner of the transaction
          schema:
            $ref: '#/components/schemas/UserId'
        - in: path
          name: transactionId
          schema:
            type: string
          required: true
          description: Transaction ID
      responses:
        '200':
          description: Transaction authorization request successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionOutcomeInfo"
        '400':
          description: Invalid transaction id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
        '502':
          description: Bad gateway
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemJson"
components:
  schemas:
    Lang:
      description: header lang identifier
      type: string
    RptId:
      description: Digital payment receipt identifier
      type: string
      pattern: '([a-zA-Z\d]{1,35})|(RF\d{2}[a-zA-Z\d]{1,21})'
    PaymentNoticeInfo:
      description: Informations about a single payment notice
      type: object
      properties:
        rptId:
          $ref: '#/components/schemas/RptId'
        amount:
          $ref: '#/components/schemas/AmountEuroCents'
      required:
        - rptId
        - amount
      example:
        rptId: string
        amount: 100
    PaymentInfo:
      description: Informations about transaction payments
      type: object
      properties:
        paymentToken:
          type: string
        rptId:
          $ref: '#/components/schemas/RptId'
        reason:
          type: string
        amount:
          $ref: '#/components/schemas/AmountEuroCents'
        transferList:
          type: array
          items:
            $ref: '#/components/schemas/Transfer'
          minItems: 1
          maxItems: 5
        isAllCCP:
          type: boolean
          description: Flag for poste psp enabling in gec request
      required:
        - rptId
        - amount
        - transferList
        - isAllCCP
      example:
        rptId: "77777777777302012387654312384"
        paymentToken: "paymentToken1"
        reason: "reason1"
        amount: 600
        isAllCCP: false
        transferList:
          - paFiscalCode: "77777777777"
            digitalStamp: false
            transferCategory: "transferCategory1"
            transferAmount: 500
          - paFiscalCode: "11111111111"
            digitalStamp: true
            transferCategory: "transferCategory2"
            transferAmount: 100
    NewTransactionRequest:
      description: Request body for creating a new transaction
      type: object
      properties:
        paymentNotices:
          type: array
          items:
            $ref: '#/components/schemas/PaymentNoticeInfo'
          minItems: 1
          maxItems: 5
          example:
            - rptId: "77777777777302012387654312384"
              amount: 100
            - rptId: "77777777777302012387654312385"
              amount: 200
        email:
          description: Email string format
          type: string
          pattern: (?:[a-zA-Z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+\/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?|\[(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?|[a-zA-Z0-9-]*[a-zA-Z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
          example: mario.rossi@gmail.it
        idCart:
          description: Cart identifier provided by creditor institution
          type: string
          example: idCartFromCreditorInstitution
      required:
        - paymentNotices
        - email
    NewTransactionResponse:
      type: object
      description: Transaction data returned when creating a new transaction
      properties:
        transactionId:
          description: the transaction unique identifier
          type: string
        status:
          $ref: "#/components/schemas/TransactionStatus"
        payments:
          type: array
          items:
            $ref: '#/components/schemas/PaymentInfo'
          minItems: 1
          maxItems: 5
          example:
            - rptId: "77777777777302012387654312384"
              paymentToken: "paymentToken1"
              reason: "reason1"
              amount: 600
              transferList:
                - paFiscalCode: "77777777777"
                  digitalStamp: false
                  transferCategory: "transferCategory1"
                  transferAmount: 500
                - paFiscalCode: "11111111111"
                  digitalStamp: true
                  transferCategory: "transferCategory2"
                  transferAmount: 100
            - rptId: "77777777777302012387654312385"
              paymentToken: "paymentToken2"
              reason: "reason2"
              amount: 400
              transferList:
                - paFiscalCode: "44444444444"
                  digitalStamp: true
                  transferCategory: "transferCategory1"
                  transferAmount: 200
                - paFiscalCode: "22222222222"
                  digitalStamp: false
                  transferCategory: "transferCategory2"
                  transferAmount: 100
        clientId:
          description: transaction client id
          enum:
            - IO
            - CHECKOUT
            - CHECKOUT_CART
        authToken:
          description: authorization token
          type: string
        idCart:
          description: Cart identifier provided by creditor institution
          type: string
          example: idCartFromCreditorInstitution
      required:
        - transactionId
        - status
        - payments
        - clientId
    RequestAuthorizationRequest:
      type: object
      description: Request body for requesting an authorization for a transaction
      properties:
        amount:
          $ref: "#/components/schemas/AmountEuroCents"
        fee:
          $ref: "#/components/schemas/AmountEuroCents"
        paymentInstrumentId:
          type: string
          description: Payment instrument id
        pspId:
          type: string
          description: PSP id
        language:
          type: string
          enum: [ IT, EN, FR, DE, SL ]
          description: Requested language
        isAllCCP:
          type: boolean
          description: Check flag for psp validation
        details:
          description: Additional payment authorization details. Must match the correct format for the chosen payment method.
          oneOf:
            - $ref: "#/components/schemas/CardsAuthRequestDetails"
            - $ref: "#/components/schemas/WalletAuthRequestDetails"
            - $ref: "#/components/schemas/ApmAuthRequestDetails"
            - $ref: "#/components/schemas/RedirectionAuthRequestDetails"
          discriminator:
            propertyName: detailType
            mapping:
              cards: "#/components/schemas/CardsAuthRequestDetails"
              wallet: "#/components/schemas/WalletAuthRequestDetails"
              apm: "#/components/schemas/ApmAuthRequestDetails"
              redirect: "#/components/schemas/RedirectionAuthRequestDetails"

      required:
        - amount
        - fee
        - paymentInstrumentId
        - pspId
        - language
        - details
        - isAllCCP
    CardsAuthRequestDetails:
      type: object
      description: Additional payment authorization details for cards NPG authorization
      properties:
        detailType:
          description: property discriminator, used to discriminate the authorization request detail. Fixed value 'cards'
          type: string
        orderId:
          type: string
          description: NPG transaction order id
      required:
        - detailType
        - orderId
      example:
        detailType: "cards"
        orderId: "orderId"
    WalletAuthRequestDetails:
      type: object
      description: Additional payment authorization details for wallet NPG authorization
      properties:
        detailType:
          description: property discriminator, used to discriminate the authorization request detail. Fixed value 'wallet'
          type: string
        walletId:
          type: string
          description: The user wallet id
      required:
        - detailType
        - walletId
      example:
        detailType: "wallet"
        walletId: "walletId"
    ApmAuthRequestDetails:
      type: object
      description: Additional payment authorization details for payment apm authorization
      properties:
        detailType:
          description: property discriminator, used to discriminate the authorization request detail. Fixed value 'apm'
          type: string
      required:
        - detailType
      example:
        detailType: "apm"
    RedirectionAuthRequestDetails:
      type: object
      description: Additional payment authorization details for Redirection authorization request
      properties:
        detailType:
          description: property discriminator, used to discriminate the authorization request detail. Fixed value 'redirect'
          type: string
      required:
        - detailType
      example:
        detailType: "redirect"
    RequestAuthorizationResponse:
      type: object
      description: Response body for requesting an authorization for a transaction
      properties:
        authorizationUrl:
          type: string
          format: url
          description: URL where to redirect clients to continue the authorization process
        authorizationRequestId:
          type: string
          description: Authorization request id
      required:
        - authorizationUrl
        - authorizationRequestId
      example:
        authorizationUrl: https://example.com
        authorizationRequestId: authRequestId
    UpdateAuthorizationRequest:
      type: object
      description: Request body for updating an authorization for a transaction
      properties:
        outcomeGateway:
          type: object
          oneOf:
            - $ref: '#/components/schemas/OutcomeNpgGateway'
            - $ref: '#/components/schemas/OutcomeRedirectGateway'
          discriminator:
            propertyName: paymentGatewayType
            mapping:
              NPG: '#/components/schemas/OutcomeNpgGateway'
              REDIRECT: '#/components/schemas/OutcomeRedirectGateway'
        timestampOperation:
          type: string
          format: date-time
          description: Payment timestamp
      required:
        - outcomeGateway
        - timestampOperation
    AddUserReceiptRequest:
      type: object
      description: Request body for adding a user receipt to a transaction
      properties:
        outcome:
          type: string
          description: Nodo outcome enum
          enum:
            - OK
            - KO
        paymentDate:
          type: string
          description: Timestamp of transaction verification/activation
          format: date-time
        payments:
          type: array
          description: Payments associated to this transaction
          items:
            type: object
            description: Payment
            properties:
              paymentToken:
                type: string
                description: Payment token associated to this payment
              description:
                type: string
                description: Payment description
              creditorReferenceId:
                type: string
                description: Creditor reference id
              fiscalCode:
                type: string
                description: Receiving body fiscal code
              companyName:
                type: string
                description: Receiving body public name
              officeName:
                type: string
                description: Receiving office name
              debtor:
                type: string
                description: Debtor's id
            required:
              - paymentToken
              - description
              - creditorReferenceId
              - fiscalCode
              - debtor
          minItems: 1
          maxItems: 5
      required:
        - outcome
        - paymentDate
        - payments
    AddUserReceiptResponse:
      type: object
      description: Response body for adding user receipt
      properties:
        outcome:
          type: string
          description: Nodo outcome enum
          enum:
            - OK
            - KO
      required:
        - outcome
    TransactionInfo:
      description: Transaction data returned when querying for an existing transaction
      allOf:
        - $ref: "#/components/schemas/NewTransactionResponse"
        - type: object
          properties:
            feeTotal:
              $ref: "#/components/schemas/AmountEuroCents"
            gateway:
              type: string
              example: 'NPG'
            sendPaymentResultOutcome:
              type: string
              enum:
                - OK
                - KO
                - NOT_RECEIVED
            authorizationCode:
              type: string
            errorCode:
              type: string
            gatewayAuthorizationStatus:
              type: string
              description: payment gateway authorization status
          required:
            - status
    TransactionOutcomeInfo:
      type: object
      description: Transaction outcome info returned when querying for an existing transaction outcome status
      properties:
        outcome:
          type: number
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
            - 10
            - 11
            - 12
            - 13
            - 14
            - 17
            - 25
            - 99
            - 116
            - 117
            - 121
          description: "`0` - Success `1` - Generic error `2` - Authorization error `3` - Invalid data `4` - Timeout `5` - Unsupported circuit `6` - Missing data `7` - Invalid card: expired card etc `8` - Canceled by the user `9` - Double transaction `10` - Excessive amount `11` - Order not present `12` - Invalid method `13` - Retriable KO `14` - Invalid session `17` - Taken in charge `25` - PSP Error `99` - Backend Error `116` - Balance not available `117` - CVV Error `121` - Limit exceeded"
        totalAmount:
          $ref: '#/components/schemas/AmountEuroCents'
    AmountEuroCents:
      description: Amount for payments, in euro cents
      type: integer
      minimum: 0
      maximum: 99999999
    AuthorizationResult:
      description: Authorization result
      type: string
      enum:
        - OK
        - KO
    TransactionStatus:
      type: string
      description: Possible statuses a transaction can be in
      enum:
        - ACTIVATED
        - AUTHORIZATION_REQUESTED
        - AUTHORIZATION_COMPLETED
        - CLOSURE_REQUESTED
        - CLOSED
        - CLOSURE_ERROR
        - NOTIFIED_OK
        - NOTIFIED_KO
        - NOTIFICATION_ERROR
        - NOTIFICATION_REQUESTED
        - EXPIRED
        - REFUNDED
        - CANCELED
        - EXPIRED_NOT_AUTHORIZED
        - UNAUTHORIZED
        - REFUND_ERROR
        - REFUND_REQUESTED
        - CANCELLATION_REQUESTED
        - CANCELLATION_EXPIRED
    ClientId:
      type: string
      description: Enumerations of client ids
      enum:
        - IO
        - CHECKOUT
        - CHECKOUT_CART
    Transfer:
      type: object
      description: The dto that contains information about the creditor entities
      properties:
        paFiscalCode:
          type: string
          description: The creditor institution fiscal code
          pattern: '^[a-zA-Z0-9]{11}'
        digitalStamp:
          type: boolean
          description: True if it is a digital stamp. False otherwise
        transferCategory:
          type: string
          description: The taxonomy of the transfer
        transferAmount:
          $ref: '#/components/schemas/AmountEuroCents'
      required:
        - paFiscalCode
        - digitalStamp
        - transferAmount
    ProblemJson:
      description: Body definition for error responses containing failure details
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |-
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: about:blank
          example: https://example.com/problem/constraint-violation
        title:
          type: string
          description: |-
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          $ref: "#/components/schemas/HttpStatusCode"
        detail:
          type: string
          description: |-
            A human readable explanation specific to this occurrence of the
            problem.
          example: There was an error processing the request
        instance:
          type: string
          format: uri
          description: |-
            An absolute URI that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.
    HttpStatusCode:
      type: integer
      format: int32
      description: |-
        The HTTP status code generated by the origin server for this occurrence
        of the problem.
      minimum: 100
      maximum: 600
      exclusiveMaximum: true
      example: 200
    ValidationFaultPaymentProblemJson:
      description: |-
        A PaymentProblemJson-like type specific for the GetPayment operations.
        Possible values of `detail_v2` are limited to faults pertaining to validation errors.
      type: object
      properties:
        title:
          type: string
          description: |-
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        faultCodeCategory:
          $ref: '#/components/schemas/FaultCategory'
        faultCodeDetail:
          $ref: '#/components/schemas/ValidationFault'
      required:
        - faultCodeCategory
        - faultCodeDetail
    PaymentStatusFaultPaymentProblemJson:
      description: |-
        A PaymentProblemJson-like type specific for the GetPayment and ActivatePayment operations.
        Possible values of `detail_v2` are limited to faults pertaining to Nodo errors related to payment status conflicts.
      type: object
      properties:
        title:
          type: string
          description: |-
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        faultCodeCategory:
          $ref: '#/components/schemas/FaultCategory'
        faultCodeDetail:
          $ref: '#/components/schemas/PaymentStatusFault'
      required:
        - faultCodeCategory
        - faultCodeDetail
    GatewayFaultPaymentProblemJson:
      description: |-
        A PaymentProblemJson-like type specific for the GetPayment and ActivatePayment operations.
        Possible values of `detail_v2` are limited to faults pertaining to Nodo errors.
      type: object
      properties:
        title:
          type: string
          description: |-
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        faultCodeCategory:
          $ref: '#/components/schemas/FaultCategory'
        faultCodeDetail:
          $ref: '#/components/schemas/GatewayFault'
      required:
        - faultCodeCategory
        - faultCodeDetail
    PartyConfigurationFaultPaymentProblemJson:
      description: |-
        A PaymentProblemJson-like type specific for the GetPayment
      type: object
      properties:
        title:
          type: string
          description: |-
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        faultCodeCategory:
          $ref: '#/components/schemas/FaultCategory'
        faultCodeDetail:
          $ref: '#/components/schemas/PartyConfigurationFault'
      required:
        - faultCodeCategory
        - faultCodeDetail
    PartyTimeoutFaultPaymentProblemJson:
      description: |-
        A PaymentProblemJson-like type specific for the GetPayment an operations.
      type: object
      properties:
        faultCodeCategory:
          $ref: '#/components/schemas/FaultCategory'
        faultCodeDetail:
          $ref: '#/components/schemas/PartyTimeoutFault'
        title:
          type: string
          description: |-
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
      required:
        - faultCodeCategory
        - faultCodeDetail
    FaultCategory:
      description: |-
        Fault code categorization for the PagoPA Verifica and Attiva operations.
        Possible categories are:
        - `PAYMENT_DUPLICATED`
        - `PAYMENT_ONGOING`
        - `PAYMENT_EXPIRED`
        - `PAYMENT_UNAVAILABLE`
        - `PAYMENT_UNKNOWN`
        - `DOMAIN_UNKNOWN`
        - `PAYMENT_CANCELED`
        - `GENERIC_ERROR`
      type: string
      enum:
        - PAYMENT_DUPLICATED
        - PAYMENT_ONGOING
        - PAYMENT_EXPIRED
        - PAYMENT_UNAVAILABLE
        - PAYMENT_UNKNOWN
        - DOMAIN_UNKNOWN
        - PAYMENT_CANCELED
        - GENERIC_ERROR
    PaymentStatusFault:
      description: |-
        Fault codes for errors related to payment attempts that cause conflict with the current payment status,
        such as a duplicated payment attempt or a payment attempt made while another attempt is still being processed.
        Should be mapped to 409 HTTP status code.
        For further information visit https://docs.pagopa.it/gestionedeglierrori/struttura-degli-errori/fault-code.
        Possible fault codes are:
        - `PPT_PAGAMENTO_IN_CORSO`
        - `PAA_PAGAMENTO_IN_CORSO`
        - `PPT_PAGAMENTO_DUPLICATO`
        - `PAA_PAGAMENTO_DUPLICATO`
        - `PAA_PAGAMENTO_SCADUTO`
      type: string
      enum:
        - PPT_PAGAMENTO_IN_CORSO
        - PAA_PAGAMENTO_IN_CORSO
        - PPT_PAGAMENTO_DUPLICATO
        - PAA_PAGAMENTO_DUPLICATO
        - PAA_PAGAMENTO_SCADUTO
    ValidationFault:
      description: |-
        Fault codes for errors related to well-formed requests to ECs not present inside Nodo, should be mapped to 404 HTTP status code.
        Most of the time these are generated when users input a wrong fiscal code or notice number.
        For further information visit https://docs.pagopa.it/gestionedeglierrori/struttura-degli-errori/fault-code.
        Possible fault codes are:
        - `PAA_PAGAMENTO_SCONOSCIUTO`
        - `PPT_DOMINIO_SCONOSCIUTO`
        - `PPT_INTERMEDIARIO_PA_SCONOSCIUTO`
        - `PPT_STAZIONE_INT_PA_SCONOSCIUTA`
        - `PAA_PAGAMENTO_ANNULLATO`
      type: string
      enum:
        - PAA_PAGAMENTO_SCONOSCIUTO
        - PPT_DOMINIO_SCONOSCIUTO
        - PPT_INTERMEDIARIO_PA_SCONOSCIUTO
        - PPT_STAZIONE_INT_PA_SCONOSCIUTA
        - PAA_PAGAMENTO_ANNULLATO
    GatewayFault:
      description: |-
        Fault codes for generic downstream services errors, should be mapped to 502 HTTP status code.
        For further information visit https://docs.pagopa.it/gestionedeglierrori/struttura-degli-errori/fault-code.
        Possible fault codes are:
        - `GENERIC_ERROR`
        - `PPT_SINTASSI_EXTRAXSD`
        - `PPT_SINTASSI_XSD`
        - `PPT_PSP_SCONOSCIUTO`
        - `PPT_PSP_DISABILITATO`
        - `PPT_INTERMEDIARIO_PSP_SCONOSCIUTO`
        - `PPT_INTERMEDIARIO_PSP_DISABILITATO`
        - `PPT_CANALE_SCONOSCIUTO`
        - `PPT_CANALE_DISABILITATO`
        - `PPT_AUTENTICAZIONE`
        - `PPT_AUTORIZZAZIONE`
        - `PPT_CODIFICA_PSP_SCONOSCIUTA`
        - `PAA_SEMANTICA`
        - `PPT_SEMANTICA`
        - `PPT_SYSTEM_ERROR`
        - `PAA_SYSTEM_ERROR`
      type: string
      enum:
        - GENERIC_ERROR
        - PPT_SINTASSI_EXTRAXSD
        - PPT_SINTASSI_XSD
        - PPT_PSP_SCONOSCIUTO
        - PPT_PSP_DISABILITATO
        - PPT_INTERMEDIARIO_PSP_SCONOSCIUTO
        - PPT_INTERMEDIARIO_PSP_DISABILITATO
        - PPT_CANALE_SCONOSCIUTO
        - PPT_CANALE_DISABILITATO
        - PPT_AUTENTICAZIONE
        - PPT_AUTORIZZAZIONE
        - PPT_CODIFICA_PSP_SCONOSCIUTA
        - PAA_SEMANTICA
        - PPT_SEMANTICA
        - PPT_SYSTEM_ERROR
        - PAA_SYSTEM_ERROR
    PartyConfigurationFault:
      description: |-
        Fault codes for fatal errors from ECs, should be mapped to 503 HTTP status code.
        For further information visit https://docs.pagopa.it/gestionedeglierrori/struttura-degli-errori/fault-code.
        Possible fault codes are:
        - `PPT_DOMINIO_DISABILITATO`
        - `PPT_INTERMEDIARIO_PA_DISABILITATO`
        - `PPT_STAZIONE_INT_PA_DISABILITATA`
        - `PPT_ERRORE_EMESSO_DA_PAA`
        - `PPT_STAZIONE_INT_PA_ERRORE_RESPONSE`
        - `PPT_IBAN_NON_CENSITO`
        - `PAA_SINTASSI_EXTRAXSD`
        - `PAA_SINTASSI_XSD`
        - `PAA_ID_DOMINIO_ERRATO`
        - `PAA_ID_INTERMEDIARIO_ERRATO`
        - `PAA_STAZIONE_INT_ERRATA`
        - `PAA_ATTIVA_RPT_IMPORTO_NON_VALIDO`
      type: string
      enum:
        - PPT_DOMINIO_DISABILITATO
        - PPT_INTERMEDIARIO_PA_DISABILITATO
        - PPT_STAZIONE_INT_PA_DISABILITATA
        - PPT_ERRORE_EMESSO_DA_PAA
        - PPT_STAZIONE_INT_PA_ERRORE_RESPONSE
        - PPT_IBAN_NON_CENSITO
        - PAA_SINTASSI_EXTRAXSD
        - PAA_SINTASSI_XSD
        - PAA_ID_DOMINIO_ERRATO
        - PAA_ID_INTERMEDIARIO_ERRATO
        - PAA_STAZIONE_INT_ERRATA
        - PAA_ATTIVA_RPT_IMPORTO_NON_VALIDO
    PartyTimeoutFault:
      description: |-
        Fault codes for timeout errors, should be mapped to 504 HTTP status code.
        For further information visit https://docs.pagopa.it/gestionedeglierrori/struttura-degli-errori/fault-code.
        Possible fault codes are:
        - `PPT_STAZIONE_INT_PA_TIMEOUT`
        - `PPT_STAZIONE_INT_PA_IRRAGGIUNGIBILE`
        - `PPT_STAZIONE_INT_PA_SERVIZIO_NONATTIVO`
        - `GENERIC_ERROR`
      type: string
      enum:
        - PPT_STAZIONE_INT_PA_TIMEOUT
        - PPT_STAZIONE_INT_PA_IRRAGGIUNGIBILE
        - PPT_STAZIONE_INT_PA_SERVIZIO_NONATTIVO
        - GENERIC_ERROR
    OutcomeNpgGateway:
      type: object
      properties:
        paymentGatewayType:
          type: string
          example: 'NPG'
        operationResult:
          type: string
          description: outcome received by NPG - https://developer.nexi.it/it/api/notifica
          enum:
            - AUTHORIZED
            - EXECUTED
            - DECLINED
            - DENIED_BY_RISK
            - THREEDS_VALIDATED
            - THREEDS_FAILED
            - PENDING
            - CANCELED
            - VOIDED
            - REFUNDED
            - FAILED
        orderId:
          description: Operator unique order ID
          type: string
        operationId:
          description: Operation ID
          type: string
        authorizationCode:
          type: string
          description: Authorization code
        errorCode:
          type: string
          description: Error code
        paymentEndToEndId:
          description: Circuit unique transaction ID
          type: string
        rrn:
          description: Transaction rrn
          type: string
        validationServiceId:
          description: Validation service id
          type: string
      required:
        - paymentGatewayType
        - operationResult
    OutcomeRedirectGateway:
      type: object
      properties:
        paymentGatewayType:
          type: string
          example: REDIRECT
          description: disciminator field. fixed value `REDIRECT`
        pspTransactionId:
          type: string
          description: PSP transaction unique ID
        outcome:
          $ref: 'https://raw.githubusercontent.com/pagopa/pagopa-api/SANP3.6.1/openapi/redirect.yaml#/components/schemas/AuthorizationOutcome'
        pspId:
          type: string
          description: PSP ID from which the authorization outcome request come
        authorizationCode:
          type: string
          description: payment authorization code
        errorCode:
          type: string
          description: payment error code
      required:
        - paymentGatewayType
        - pspId
        - outcome
        - pspTransactionId
    UserId:
      description: unique user identifier
      type: string
      format: uuid
  requestBodies:
    NewTransactionRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NewTransactionRequest"
    RequestAuthorizationRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RequestAuthorizationRequest"
    UpdateAuthorizationRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateAuthorizationRequest"
    AddUserReceiptRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AddUserReceiptRequest"
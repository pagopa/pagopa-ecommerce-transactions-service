application.name=@project.artifactId@
build.version=@project.version@
spring.redis.host=${REDIS_HOST}
spring.redis.password=${REDIS_PASSWORD}
spring.redis.port=${REDIS_PORT}
spring.redis.ssl=${REDIS_SSL_ENABLED}
spring.data.redis.repositories.type=none
spring.jackson.default-property-inclusion=non_null
logging.level.web=${WEB_LOGGING_LEVEL:off}
logging.level.it.pagopa=${SERVICE_LOGGING_LEVEL:info}

nodo.hostname=${NODO_HOSTNAME}
nodo.nodeforpsp.uri=${NODE_FOR_PSP_URI}
nodo.nodoperpm.uri=${NODO_PER_PM_URI}
nodo.readTimeout=${NODO_READ_TIMEOUT}
nodo.connectionTimeout=${NODO_CONNECTION_TIMEOUT}
nodo.connection.string=${NODO_CONNECTION_STRING}
nodo.parallelRequests=${NODO_PARALLEL_REQUESTS}
nodo.allCCPOnTransferIbanEnabled=${NODO_ALL_CCP_ON_TRANSFER_IBAN_ENABLED}
nodo.ecommerce.clientId=${NODO_ECOMMERCE_CLIENT_ID}

ecommercePaymentMethods.uri=${ECOMMERCE_PAYMENT_METHODS_URI}
ecommercePaymentMethods.readTimeout=${ECOMMERCE_PAYMENT_METHODS_READ_TIMEOUT}
ecommercePaymentMethods.connectionTimeout=${ECOMMERCE_PAYMENT_METHODS_CONNECTION_TIMEOUT}
ecommercePaymentMethods.apiKey=${ECOMMERCE_PAYMENT_METHODS_APY_KEY}
ecommercePaymentMethods.v2.uri=${ECOMMERCE_PAYMENT_METHODS_URI_V2}

wallet.uri=${WALLET_URI}
wallet.readTimeout=${WALLET_READ_TIMEOUT}
wallet.connectionTimeout=${WALLET_CONNECTION_TIMEOUT}
wallet.apiKey=${WALLET_API_KEY}

notificationsService.uri=${NOTIFICATIONS_SERVICE_URI}
notificationsService.readTimeout=${NOTIFICATIONS_SERVICE_READ_TIMEOUT}
notificationsService.connectionTimeout=${NOTIFICATIONS_SERVICE_CONNECTION_TIMEOUT}
notificationsService.apiKey=${NOTIFICATIONS_SERVICE_API_KEY}

spring.data.mongodb.uri=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/?ssl=${MONGO_SSL_ENABLED}&readPreference=primaryPreferred&maxStalenessSeconds=90&minPoolSize=${MONGO_MIN_POOL_SIZE}&maxPoolSize=${MONGO_MAX_POOL_SIZE}&maxIdleTimeMS=${MONGO_MAX_IDLE_TIMEOUT_MS}&connectTimeoutMS=${MONGO_CONNECTION_TIMEOUT_MS}&socketTimeoutMS=${MONGO_SOCKET_TIMEOUT_MS}&serverSelectionTimeoutMS=${MONGO_SERVER_SELECTION_TIMEOUT_MS}&waitQueueTimeoutMS=${MONGO_WAITING_QUEUE_MS}&heartbeatFrequencyMS=${MONGO_HEARTBEAT_FREQUENCY_MS}
spring.data.mongodb.database=ecommerce

management.endpoint.health.probes.enabled=true
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true
# expose only health probes and prometheus metrics
management.endpoints.web.exposure.include=health,prometheus
# enable only prometheus as metric exporter
# not default metrics are exported, for better readability see application.yaml
management.metrics.export.defaults.enabled=false
management.metrics.export.prometheus.enabled=true


azurestorage.connectionstringtransient=${ECOMMERCE_STORAGE_TRANSIENT_CONNECTION_STRING}
azurestorage.queues.transactionexpiration.name=${TRANSACTION_EXPIRATION_QUEUE_NAME}
azurestorage.queues.transactionrefund.name=${TRANSACTION_REFUND_QUEUE_NAME}
azurestorage.queues.transactionclosepaymentretry.name=${TRANSACTION_CLOSE_PAYMENT_RETRY_QUEUE_NAME}
azurestorage.queues.transactionclosepayment.name=${TRANSACTION_CLOSE_PAYMENT_QUEUE_NAME}
azurestorage.queues.transactionnotificationrequested.name=${TRANSACTION_NOTIFICATIONS_QUEUE_NAME}
azurestorage.queues.transactionauthorizationrequested.name=${TRANSACTIONS_AUTHORIZATION_REQUESTED_QUEUE_NAME}
azurestorage.queues.transientQueues.ttlSeconds=${TRANSIENT_QUEUES_TTL_SECONDS:604800}

spring.devtools.restart.enabled=false
server.error.include-stacktrace=${SERVER_ERROR_INCLUDE_STACKTRACE:never}

payment.token.validity=${PAYMENT_TOKEN_VALIDITY_TIME}
transactions.ecommerce.retry.offset=${TRANSACTIONS_RETRY_OFFSET}

transactions.closure_handler.retry_interval=${CLOSURE_RETRY_INTERVAL}

jwt.ecommerce.secretKey=${JWT_ECOMMERCE_SECRET}
jwt.ecommerceWebView.secretKey=${JWT_ECOMMERCE_WEBVIEW_SECRET}
npg.notification.jwt.secret=${JWT_NPG_NOTIFICATION_SECRET}
npg.notification.jwt.validity.time=${JWT_NPG_NOTIFICATION_VALIDITY_TIME}

confidentialDataManager.personalDataVault.apiKey=${PERSONAL_DATA_VAULT_API_KEY}
confidentialDataManager.personalDataVault.apiBasePath=${PERSONAL_DATA_VAULT_API_BASE_PATH}

warmup.request.newTransaction.noticeCodePrefix=${WARMUP_REQUEST_NEW_TRANSACTION_NOTICE_CODE_PREFIX:3020}


checkout.basePath=${CHECKOUT_BASE_PATH}
checkout.npg.gdi.url=${CHECKOUT_NPG_GDI_URL}
checkout.outcome.url=${CHECKOUT_OUTCOME_URL}
npg.uri=${NPG_URI}
npg.readTimeout=${NPG_READ_TIMEOUT}
npg.connectionTimeout=${NPG_CONNECTION_TIMEOUT}
npg.client.apiKey=${NPG_API_KEY}
npg.authorization.cards.keys=${NPG_CARDS_PSP_KEYS}
npg.authorization.cards.pspList=${NPG_CARDS_PSP_LIST}
npg.authorization.paypal.keys=${NPG_PAYPAL_PSP_KEYS}
npg.authorization.paypal.pspList=${NPG_PAYPAL_PSP_LIST}
npg.authorization.bancomatpay.keys=${NPG_BANCOMATPAY_PSP_KEYS}
npg.authorization.bancomatpay.pspList=${NPG_BANCOMATPAY_PSP_LIST}
npg.authorization.mybank.keys=${NPG_MYBANK_PSP_KEYS}
npg.authorization.mybank.pspList=${NPG_MYBANK_PSP_LIST}
npg.authorization.satispay.keys=${NPG_SATISPAY_PSP_KEYS}
npg.authorization.satispay.pspList=${NPG_SATISPAY_PSP_LIST}
npg.authorization.applepay.keys=${NPG_APPLEPAY_PSP_KEYS}
npg.authorization.applepay.pspList=${NPG_APPLEPAY_PSP_LIST}
authorization.event.visibilityTimeoutSeconds=${AUTH_REQUESTED_EVENT_VISIBILITY_TIMEOUT_SECONDS}
npg.authorization.retry.excluded.error.codes=${NPG_AUTHORIZATION_EXCLUDED_ERROR_CODES}
ecommerce.event.version=${ECOMMERCE_EVENT_VERSION}

ecommerce.send-payment-result-for-tx-expired.enabled=${SEND_PAYMENT_RESULT_FOR_TX_EXPIRED_ENABLED}

sessionUrl.basePath=${SESSION_URL_BASEPATH}
sessionUrl.outcomeSuffix=${SESSION_URL_OUTCOME_SUFFIX}
sessionUrl.notificationUrl=${SESSION_URL_NOTIFICATION_URL}
transactionDocument.ttl=${TRANSACTION_DOCUMENT_TTL}


redirect.paymentTypeCodeList=${REDIRECT_PAYMENT_TYPE_CODE_LIST}
redirect.pspUrlMapping=${REDIRECT_URL_MAPPING}
redirect.paymentTypeCodeDescriptionMapping=${REDIRECT_PAYMENT_TYPE_CODE_DESCRIPTION_MAPPING}

node.forwarder.apiKey=${NODE_FORWARDER_API_KEY}
node.forwarder.url=${NODE_FORWARDER_URL}
node.forwarder.readTimeout=${NODE_FORWARDER_READ_TIMEOUT}
node.forwarder.connectionTimeout=${NODE_FORWARDER_CONNECTION_TIMEOUT}

server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=30s

exclusiveLockDocument.ttlSeconds=${EXCLUSIVE_LOCK_DOCUMENT_TTL_SECONDS:2}